<?php

namespace Olsgreen\AutoTrader\Api\Builders;

use Olsgreen\AutoTrader\Api\Enums\SearchFlags;

class SearchRequestBuilder extends AbstractBuilder
{
    use HasFlags;

    protected $searchId;

    protected $stockId;

    protected $advertiserId;

    protected $pageSize;

    protected $page;

    protected $flags = [];

    protected $flagsEnum = SearchFlags::class;

    /**
     * Get the dataset flags.
     *
     * @return array
     */
    public function getFlags(): array
    {
        return $this->flags;
    }

    /**
     * Set the dataset flags.
     *
     * @param array $flags
     *
     * @throws \Exception
     *
     * @return $this
     */
    public function setFlags(array $flags): SearchRequestBuilder
    {
        $flagsList = new SearchFlags();

        if (!$flagsList->contains($flags)) {
            $badFlags = $flagsList->diff($flags);

            throw new \Exception(
                sprintf(
                    'You tried to set invalid flag(s). [%s]',
                    implode(' | ', $badFlags)
                )
            );
        }

        $this->flags = $flags;

        return $this;
    }

    public function setSearchId(string $searchId): SearchRequestBuilder
    {
        $this->searchId = $searchId;

        return $this;
    }

    public function getSearchId(): ?string
    {
        return $this->searchId;
    }

    public function setStockId(string $stockId): SearchRequestBuilder
    {
        $this->stockId = $stockId;

        return $this;
    }

    public function getStockId(): ?string
    {
        return $this->stockId;
    }

    public function setAdvertiserId(string $advertiserId): SearchRequestBuilder
    {
        $this->advertiserId = $advertiserId;

        return $this;
    }

    public function getAdvertiserId(): ?string
    {
        return $this->advertiserId;
    }

    public function setPage($page): SearchRequestBuilder
    {
        $this->page = (int) $page;

        return $this;
    }

    public function getPage(): ?int
    {
        return $this->page;
    }

    public function setPageSize($size): SearchRequestBuilder
    {
        $this->pageSize = $size;

        return $this;
    }

    public function getPageSize(): ?int
    {
        return $this->pageSize;
    }

    public function validate(): bool
    {
        $setKeys = array_filter(['advertiserId', 'searchId', 'stockId', 'searchType'], function ($key) {
            return !empty($this->$key);
        });

        if (count($setKeys) > 1) {
            throw new \InvalidArgumentException(
                'You must only specify a searchId or a stockId or an advertiser or a public search.'
            );
        }

        return parent::validate(); // TODO: Change the autogenerated stub
    }

    public function toArray(): array
    {
        $this->validate();

        $flags = $this->transformFlags($this->flags);

        return $this->filterPrepareOutput([
            'stockId'      => $this->stockId,
            'searchId'     => $this->searchId,
            'advertiserId' => $this->advertiserId,
            'pageSize'     => $this->pageSize,
            'page'         => $this->page,
            'searchType'   => in_array(SearchFlags::PUBLIC_SEARCH, $this->flags) ? 'public' : null,
        ] + array_filter($flags, function ($key) {
            return $key !== SearchFlags::PUBLIC_SEARCH;
        }, ARRAY_FILTER_USE_KEY));
    }
}
